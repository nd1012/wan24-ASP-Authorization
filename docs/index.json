{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API reference | wan24-ASP-Authorization",
    "keywords": "API reference Choose a type from the left to start browsing."
  },
  "api/wan24.ASP.Authorization.Attributes.NetworksAttribute.html": {
    "href": "api/wan24.ASP.Authorization.Attributes.NetworksAttribute.html",
    "title": "Class NetworksAttribute | wan24-ASP-Authorization",
    "keywords": "Class NetworksAttribute Authorize networks Inheritance object Attribute AuthZAttributeBase NetworksAttribute Implements IAuthorizationRequirementData Inherited Members AuthZAttributeBase.Requirements AuthZAttributeBase.GetRequirements() Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.ASP.Authorization.Attributes Assembly: wan24ASPAuthorization.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true)] public class NetworksAttribute : AuthZAttributeBase, IAuthorizationRequirementData Constructors | Edit this page View Source NetworksAttribute(bool, params string[]) Constructor Declaration public NetworksAttribute(bool deny, params string[] networks) Parameters Type Name Description bool deny Deny the networks? string[] networks CIDR notated networks (LAN stands for all LAN networks, LOOPBACK stands for loopback networks) | Edit this page View Source NetworksAttribute(params string[]) Constructor Declaration public NetworksAttribute(params string[] networks) Parameters Type Name Description string[] networks CIDR notated authorized networks Fields | Edit this page View Source LAN LAN networks Declaration public const string LAN = \"LAN\" Field Value Type Description string | Edit this page View Source LOOPBACK Loopback networks Declaration public const string LOOPBACK = \"LOOPBACK\" Field Value Type Description string Properties | Edit this page View Source Deny Deny the Networks? Declaration public bool Deny { get; } Property Value Type Description bool | Edit this page View Source Networks Networks Declaration public IpSubNets Networks { get; } Property Value Type Description IpSubNets | Edit this page View Source RequirePeer Require a peer IP address? Declaration public bool RequirePeer { get; set; } Property Value Type Description bool Methods | Edit this page View Source HandleRequirementAsync(AuthorizationHandlerContext, HttpContext?, AuthZRequirement) Handle a requirement Declaration public override Task<bool?> HandleRequirementAsync(AuthorizationHandlerContext context, HttpContext? httpContext, AuthZRequirement requirement) Parameters Type Name Description AuthorizationHandlerContext context Authorization context HttpContext httpContext http context AuthZRequirement requirement Requirement Returns Type Description Task<bool?> null, if the context doesn't need to be modified, true if succeed, otherwise false Overrides AuthZAttributeBase.HandleRequirementAsync(AuthorizationHandlerContext, HttpContext?, AuthZRequirement) Implements IAuthorizationRequirementData"
  },
  "api/wan24.ASP.Authorization.Attributes.html": {
    "href": "api/wan24.ASP.Authorization.Attributes.html",
    "title": "Namespace wan24.ASP.Authorization.Attributes | wan24-ASP-Authorization",
    "keywords": "Namespace wan24.ASP.Authorization.Attributes Classes NetworksAttribute Authorize networks"
  },
  "api/wan24.ASP.Authorization.AuthZAttributeBase.html": {
    "href": "api/wan24.ASP.Authorization.AuthZAttributeBase.html",
    "title": "Class AuthZAttributeBase | wan24-ASP-Authorization",
    "keywords": "Class AuthZAttributeBase Base class for an authorization attribute Inheritance object Attribute AuthZAttributeBase NetworksAttribute Implements IAuthorizationRequirementData Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.ASP.Authorization Assembly: wan24ASPAuthorization.dll Syntax public abstract class AuthZAttributeBase : Attribute, IAuthorizationRequirementData Constructors | Edit this page View Source AuthZAttributeBase() Constructor Declaration protected AuthZAttributeBase() Fields | Edit this page View Source Requirements Requirement Declaration protected readonly AuthZRequirement[] Requirements Field Value Type Description AuthZRequirement[] Methods | Edit this page View Source GetRequirements() Returns IAuthorizationRequirement that should be satisfied for authorization. Declaration public virtual IEnumerable<IAuthorizationRequirement> GetRequirements() Returns Type Description IEnumerable<IAuthorizationRequirement> IAuthorizationRequirement used for authorization. | Edit this page View Source HandleRequirementAsync(AuthorizationHandlerContext, HttpContext?, AuthZRequirement) Handle a requirement Declaration public abstract Task<bool?> HandleRequirementAsync(AuthorizationHandlerContext context, HttpContext? httpContext, AuthZRequirement requirement) Parameters Type Name Description AuthorizationHandlerContext context Authorization context HttpContext httpContext http context AuthZRequirement requirement Requirement Returns Type Description Task<bool?> null, if the context doesn't need to be modified, true if succeed, otherwise false Implements IAuthorizationRequirementData"
  },
  "api/wan24.ASP.Authorization.AuthZHandler.html": {
    "href": "api/wan24.ASP.Authorization.AuthZHandler.html",
    "title": "Class AuthZHandler | wan24-ASP-Authorization",
    "keywords": "Class AuthZHandler Authorization handler Inheritance object AuthorizationHandler<AuthZRequirement> AuthZHandler Implements IAuthorizationHandler Inherited Members AuthorizationHandler<AuthZRequirement>.HandleAsync(AuthorizationHandlerContext) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.ASP.Authorization Assembly: wan24ASPAuthorization.dll Syntax public class AuthZHandler : AuthorizationHandler<AuthZRequirement>, IAuthorizationHandler Constructors | Edit this page View Source AuthZHandler() Authorization handler Declaration public AuthZHandler() | Edit this page View Source AuthZHandler(in IHttpContextAccessor) Constructor Declaration public AuthZHandler(in IHttpContextAccessor httpContextAccessor) Parameters Type Name Description IHttpContextAccessor httpContextAccessor http context accessor Fields | Edit this page View Source HttpContextAccessor http context accessor Declaration protected readonly IHttpContextAccessor? HttpContextAccessor Field Value Type Description IHttpContextAccessor Methods | Edit this page View Source HandleRequirementAsync(AuthorizationHandlerContext, AuthZRequirement) Makes a decision if authorization is allowed based on a specific requirement. Declaration protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, AuthZRequirement requirement) Parameters Type Name Description AuthorizationHandlerContext context The authorization context. AuthZRequirement requirement The requirement to evaluate. Returns Type Description Task Overrides AuthorizationHandler<AuthZRequirement>.HandleRequirementAsync(AuthorizationHandlerContext, AuthZRequirement) Implements IAuthorizationHandler"
  },
  "api/wan24.ASP.Authorization.AuthZRequirement.html": {
    "href": "api/wan24.ASP.Authorization.AuthZRequirement.html",
    "title": "Class AuthZRequirement | wan24-ASP-Authorization",
    "keywords": "Class AuthZRequirement Authorization requirement Inheritance object AuthZRequirement Implements IAuthorizationRequirement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.ASP.Authorization Assembly: wan24ASPAuthorization.dll Syntax public class AuthZRequirement : IAuthorizationRequirement Constructors | Edit this page View Source AuthZRequirement(in AuthZAttributeBase) Authorization requirement Declaration public AuthZRequirement(in AuthZAttributeBase attr) Parameters Type Name Description AuthZAttributeBase attr Authorization attribute Properties | Edit this page View Source AuthZAttribute Authorization attribute Declaration public AuthZAttributeBase AuthZAttribute { get; } Property Value Type Description AuthZAttributeBase Methods | Edit this page View Source HandleRequirementAsync(AuthorizationHandlerContext, HttpContext?) Handle a requirement Declaration public virtual Task<bool?> HandleRequirementAsync(AuthorizationHandlerContext context, HttpContext? httpContext) Parameters Type Name Description AuthorizationHandlerContext context Authorization context HttpContext httpContext http context Returns Type Description Task<bool?> null, if the context doesn't need to be modified, true if succeed, otherwise false Implements IAuthorizationRequirement"
  },
  "api/wan24.ASP.Authorization.FakeAuthNHandler.html": {
    "href": "api/wan24.ASP.Authorization.FakeAuthNHandler.html",
    "title": "Class FakeAuthNHandler | wan24-ASP-Authorization",
    "keywords": "Class FakeAuthNHandler Fake authentication handler (CAUTION: This authenticates EVERYTHING!) Inheritance object AuthenticationHandler<AuthenticationSchemeOptions> FakeAuthNHandler Implements IAuthenticationHandler Inherited Members AuthenticationHandler<AuthenticationSchemeOptions>.InitializeAsync(AuthenticationScheme, HttpContext) AuthenticationHandler<AuthenticationSchemeOptions>.AuthenticateAsync() AuthenticationHandler<AuthenticationSchemeOptions>.ChallengeAsync(AuthenticationProperties) AuthenticationHandler<AuthenticationSchemeOptions>.ForbidAsync(AuthenticationProperties) AuthenticationHandler<AuthenticationSchemeOptions>.Scheme AuthenticationHandler<AuthenticationSchemeOptions>.Options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.ASP.Authorization Assembly: wan24ASPAuthorization.dll Syntax public sealed class FakeAuthNHandler : AuthenticationHandler<AuthenticationSchemeOptions>, IAuthenticationHandler Constructors | Edit this page View Source FakeAuthNHandler(IOptionsMonitor<AuthenticationSchemeOptions>, ILoggerFactory, UrlEncoder) Fake authentication handler (CAUTION: This authenticates EVERYTHING!) Declaration public FakeAuthNHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder) Parameters Type Name Description IOptionsMonitor<AuthenticationSchemeOptions> options Options ILoggerFactory logger Logger UrlEncoder encoder URL encoder Methods | Edit this page View Source HandleAuthenticateAsync() Allows derived types to handle authentication. Declaration protected override Task<AuthenticateResult> HandleAuthenticateAsync() Returns Type Description Task<AuthenticateResult> The AuthenticateResult. Overrides AuthenticationHandler<AuthenticationSchemeOptions>.HandleAuthenticateAsync() Implements IAuthenticationHandler"
  },
  "api/wan24.ASP.Authorization.HostApplicationBuilderExtensions.html": {
    "href": "api/wan24.ASP.Authorization.HostApplicationBuilderExtensions.html",
    "title": "Class HostApplicationBuilderExtensions | wan24-ASP-Authorization",
    "keywords": "Class HostApplicationBuilderExtensions IHostApplicationBuilder extensions Inheritance object HostApplicationBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: wan24.ASP.Authorization Assembly: wan24ASPAuthorization.dll Syntax public static class HostApplicationBuilderExtensions Methods | Edit this page View Source AddWan24AuthZ(IHostApplicationBuilder) Add wan24-ASP-Authorization Declaration public static IHostApplicationBuilder AddWan24AuthZ(this IHostApplicationBuilder builder) Parameters Type Name Description IHostApplicationBuilder builder Builder Returns Type Description IHostApplicationBuilder Builder | Edit this page View Source AddWan24FakeAuthN(IHostApplicationBuilder) Add a fake authentication handler, which authenticates EVERYTHING! Declaration public static IHostApplicationBuilder AddWan24FakeAuthN(this IHostApplicationBuilder builder) Parameters Type Name Description IHostApplicationBuilder builder Builder Returns Type Description IHostApplicationBuilder Builder"
  },
  "api/wan24.ASP.Authorization.html": {
    "href": "api/wan24.ASP.Authorization.html",
    "title": "Namespace wan24.ASP.Authorization | wan24-ASP-Authorization",
    "keywords": "Namespace wan24.ASP.Authorization Classes AuthZAttributeBase Base class for an authorization attribute AuthZHandler Authorization handler AuthZRequirement Authorization requirement FakeAuthNHandler Fake authentication handler (CAUTION: This authenticates EVERYTHING!) HostApplicationBuilderExtensions IHostApplicationBuilder extensions"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | wan24-ASP-Authorization",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "wan24-ASP-Authorization | wan24-ASP-Authorization",
    "keywords": "wan24-ASP-Authorization This library helps with ASP.NET authorization in case you'd like to use dynamic authorization (authZ) attributes. NOTE: Authentication (authN) is required to be setup - otherwise ASP.NET won't authorize anything and fail. How to get it This library is available as NuGet package. Usage var builder = WebApplication.CreateBuilder(args); ... // Sadly authorization won't work without authentication builder.Services.AddAuthentication...; ... // Will call builder.Services.AddAuthorization(), too builder.AddWan24AuthZ(); ... var app = builder.Build(); ... // Mandatory.. app.UseAuthentication(); ... // Authorize after authentication (and routing, etc.) app.UseAuthorization(); ... app.Run(); Or to use a fake authentication handler, which authenticates EVERYTHING: var builder = WebApplication.CreateBuilder(args); ... // CAUTION: Authenticates EVERYTHING! builder.AddWan24FakeAuthN(); ... // Will call builder.Services.AddAuthorization(), too builder.AddWan24AuthZ(); ... var app = builder.Build(); ... // Mandatory.. app.UseAuthentication(); ... // Authorize after authentication (and routing, etc.) app.UseAuthorization(); ... app.Run(); CAUTION: The fake authentication handler authenticates EVERYTHING and makes it possible to use authorization in case you don't want to use authentication. Create a custom authorization attribute Your custom authorization attribute: [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)] public class YourAuthZAttribute() : AuthZAttributeBase() { public override Task<bool?> HandleRequirementAsync( AuthorizationHandlerContext context, HttpContext? httpContext, AuthZRequirement requirement ) { // Handle your authorization logic based on the given context informations and // return NULL, if you've called context.Succeed/Fail from within this method // return TRUE, if authorized // return FALSE, if unauthorized } } Usage in an API controller: [YourAuthZAttribute] public class YourController : ControllerBase { ... } Factory authorization attributes These attributes are available from the wan24.ASP.Authorization.Attributes namespace: Authorize networks Using the NetworksAttribute you can authorize access based on the peers IP address (taken from HttpContext.Connection.RemoteIpAddress): [Networks(\"127.0.0.1/32\")] The networks must be CIDR notated. You can also unauthorize specific networks using this attribute: [Networks(deny: true, \"127.0.0.1/32\")] NOTE: Multiple attributes are allowed."
  }
}